# GitLab CI/CD Pipeline for BorgOS

stages:
  - test
  - build
  - deploy
  - release

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY: $CI_REGISTRY
  DASHBOARD_IMAGE: $CI_REGISTRY_IMAGE/dashboard
  WEBSITE_IMAGE: $CI_REGISTRY_IMAGE/website

# Cache Python dependencies
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - echo "Starting CI/CD Pipeline for BorgOS"

# Test Stage
test:python:
  stage: test
  image: python:3.11-slim
  script:
    - pip install --cache-dir .cache/pip -r webui/requirements_dashboard.txt
    - pip install pytest pytest-cov flake8
    - flake8 webui/ --max-line-length=120 --ignore=E501,W503
    - pytest tests/ --cov=webui --cov-report=term --cov-report=html
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week

# Build Stage
build:dashboard:
  stage: build
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -f Dockerfile.dashboard -t $DASHBOARD_IMAGE:$CI_COMMIT_SHA .
    - docker tag $DASHBOARD_IMAGE:$CI_COMMIT_SHA $DASHBOARD_IMAGE:latest
    - docker push $DASHBOARD_IMAGE:$CI_COMMIT_SHA
    - docker push $DASHBOARD_IMAGE:latest
  only:
    - main
    - develop
    - tags

build:website:
  stage: build
  image: docker:24
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -f Dockerfile.website -t $WEBSITE_IMAGE:$CI_COMMIT_SHA .
    - docker tag $WEBSITE_IMAGE:$CI_COMMIT_SHA $WEBSITE_IMAGE:latest
    - docker push $WEBSITE_IMAGE:$CI_COMMIT_SHA
    - docker push $WEBSITE_IMAGE:latest
  only:
    - main
    - develop
    - tags

# Security Scanning
security:scan:
  stage: test
  image: 
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy fs --no-progress --security-checks vuln,config .
  allow_failure: true
  only:
    - main
    - develop

# Deploy to Staging
deploy:staging:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://staging.borgos.ai
  before_script:
    - echo "$KUBE_CONFIG_STAGING" | base64 -d > ~/.kube/config
  script:
    - kubectl set image deployment/borgos-dashboard dashboard=$DASHBOARD_IMAGE:$CI_COMMIT_SHA -n borgos-staging
    - kubectl set image deployment/borgos-website website=$WEBSITE_IMAGE:$CI_COMMIT_SHA -n borgos-staging
    - kubectl rollout status deployment/borgos-dashboard -n borgos-staging
    - kubectl rollout status deployment/borgos-website -n borgos-staging
  only:
    - develop

# Deploy to Production
deploy:production:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://borgos.ai
  before_script:
    - echo "$KUBE_CONFIG_PRODUCTION" | base64 -d > ~/.kube/config
  script:
    - kubectl set image deployment/borgos-dashboard dashboard=$DASHBOARD_IMAGE:$CI_COMMIT_SHA -n borgos
    - kubectl set image deployment/borgos-website website=$WEBSITE_IMAGE:$CI_COMMIT_SHA -n borgos
    - kubectl rollout status deployment/borgos-dashboard -n borgos
    - kubectl rollout status deployment/borgos-website -n borgos
  only:
    - tags
  when: manual

# Deploy with Docker Compose (Alternative)
deploy:compose:
  stage: deploy
  image: docker:24
  services:
    - docker:24-dind
  environment:
    name: docker-compose
    url: http://$CI_ENVIRONMENT_URL
  before_script:
    - apk add --no-cache docker-compose
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose pull
    - docker-compose up -d
    - docker-compose ps
  only:
    - main
  when: manual

# Create Release
release:create:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Creating release ${CI_COMMIT_TAG}"
  release:
    tag_name: $CI_COMMIT_TAG
    name: "Release $CI_COMMIT_TAG"
    description: "Release $CI_COMMIT_TAG of BorgOS"
    assets:
      links:
        - name: "Dashboard Image"
          url: "$CI_REGISTRY_IMAGE/dashboard:$CI_COMMIT_TAG"
        - name: "Website Image"
          url: "$CI_REGISTRY_IMAGE/website:$CI_COMMIT_TAG"
  only:
    - tags

# Performance Testing
test:performance:
  stage: test
  image: grafana/k6:latest
  script:
    - k6 run tests/performance/load-test.js
  artifacts:
    reports:
      performance: performance-report.json
  only:
    - main
    - develop
  when: manual