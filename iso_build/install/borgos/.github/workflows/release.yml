name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.api
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/borgos-api:latest
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/borgos-api:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Dashboard image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.dashboard
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/borgos-dashboard:latest
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/borgos-dashboard:${{ github.ref_name }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "# Changelog" > CHANGELOG_RELEASE.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG_RELEASE.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: CHANGELOG_RELEASE.md
        draft: false
        prerelease: false
        files: |
          docker-compose.yml
          docker-compose.prod.yml
          .env.example
          install.sh
        generate_release_notes: true

  build-iso:
    name: Build Bootable ISO
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debootstrap \
          squashfs-tools \
          xorriso \
          isolinux \
          syslinux-common
    
    - name: Build ISO
      run: |
        sudo bash create-iso.sh
    
    - name: Upload ISO as artifact
      uses: actions/upload-artifact@v3
      with:
        name: borgos-iso
        path: borgos-v*.iso
    
    - name: Upload ISO to Release
      uses: softprops/action-gh-release@v1
      with:
        files: borgos-v*.iso

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install -g @redocly/cli
        npm install -g swagger-ui-dist
    
    - name: Build documentation
      run: |
        mkdir -p public
        cp -r docs/* public/
        # Generate API docs from OpenAPI spec if available
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [create-release, deploy-docs]
    if: always()
    
    steps:
    - name: Send Discord notification
      if: env.DISCORD_WEBHOOK != ''
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\"content\": \"ðŸš€ BorgOS ${{ github.ref_name }} has been released! Check it out at https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}\"}" \
          $DISCORD_WEBHOOK
    
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK != ''
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        curl -X POST \
          -H 'Content-type: application/json' \
          --data "{\"text\":\"ðŸš€ BorgOS ${{ github.ref_name }} has been released!\"}" \
          $SLACK_WEBHOOK