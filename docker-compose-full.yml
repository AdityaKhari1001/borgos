version: '3.8'

services:
  # ============================================
  # DATABASES
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: borgos-postgres
    environment:
      - POSTGRES_USER=borgos
      - POSTGRES_PASSWORD=${DB_PASSWORD:-borgos123}
      - POSTGRES_DB=borgos
      - POSTGRES_INITDB_ARGS=--encoding=UTF8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - borgos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U borgos"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: borgos-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-borgos123}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - borgos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD:-borgos123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  chromadb:
    image: chromadb/chroma:latest
    container_name: borgos-chromadb
    ports:
      - "8010:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token_authn.TokenAuthenticationServerProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_TOKEN:-borgos-token-123}
    networks:
      - borgos-network
    restart: unless-stopped

  # ============================================
  # AI AGENTS & MODELS
  # ============================================
  ollama:
    image: ollama/ollama:latest
    container_name: borgos-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_MODELS_PATH=/root/.ollama/models
    networks:
      - borgos-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G

  agent-zero:
    build:
      context: ./agent-zero
      dockerfile: Dockerfile
    container_name: borgos-agent-zero
    ports:
      - "8085:8085"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OLLAMA_API_BASE_URL=http://ollama:11434
      - AGENT_ZERO_PORT=8085
    volumes:
      - agent-zero-data:/app/data
      - agent-zero-memory:/app/memory
      - ./agent-zero/config:/app/config
    networks:
      - borgos-network
    restart: unless-stopped
    depends_on:
      - ollama
      - postgres

  # ============================================
  # BORGOS CORE SERVICES
  # ============================================
  borgos-api:
    build:
      context: ./core
      dockerfile: Dockerfile
    container_name: borgos-api
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=postgresql://borgos:${DB_PASSWORD:-borgos123}@postgres:5432/borgos
      - REDIS_URL=redis://:${REDIS_PASSWORD:-borgos123}@redis:6379
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      - CHROMADB_AUTH_TOKEN=${CHROMA_TOKEN:-borgos-token-123}
      - OLLAMA_API_BASE_URL=http://ollama:11434
      - AGENT_ZERO_URL=http://agent-zero:8085
      - ZENITH_BACKEND_URL=http://zenith-backend:8100
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-min-32-chars}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ./core:/app
      - ./data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - borgos-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started

  borgos-dashboard:
    build:
      context: ./webui
      dockerfile: Dockerfile
    container_name: borgos-dashboard
    ports:
      - "6969:80"
    environment:
      - API_URL=http://borgos-api:8081
      - AGENT_ZERO_URL=http://agent-zero:8085
      - ZENITH_URL=http://zenith-frontend:80
    networks:
      - borgos-network
    restart: unless-stopped
    depends_on:
      - borgos-api

  # ============================================
  # ZENITH CODER
  # ============================================
  zenith-backend:
    build:
      context: ./zenith-coder/backend
      dockerfile: Dockerfile
    container_name: borgos-zenith-backend
    ports:
      - "8101:8100"
    environment:
      - DATABASE_URL=postgresql://borgos:${DB_PASSWORD:-borgos123}@postgres:5432/zenith
      - REDIS_URL=redis://:${REDIS_PASSWORD:-borgos123}@redis:6379
      - API_PORT=8100
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ./zenith-coder/backend:/app
      - zenith-projects:/projects
    networks:
      - borgos-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  zenith-frontend:
    build:
      context: ./zenith-coder/frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: /api/v1
    container_name: borgos-zenith-frontend
    ports:
      - "3101:80"
    environment:
      - VITE_API_URL=http://zenith-backend:8100/api/v1
    volumes:
      - ./zenith-coder/frontend:/app
    networks:
      - borgos-network
    restart: unless-stopped
    depends_on:
      - zenith-backend

  # ============================================
  # DEVOPS TOOLS
  # ============================================
  n8n:
    image: n8nio/n8n:latest
    container_name: borgos-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=${DOMAIN:-borg.tools.ddns.net}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-your-encryption-key}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=borgos
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD:-borgos123}
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - borgos-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

  portainer:
    image: portainer/portainer-ce:latest
    container_name: borgos-portainer
    ports:
      - "9000:9000"
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - borgos-network
    restart: unless-stopped

  # ============================================
  # OPTIONAL: MCP SERVER
  # ============================================
  mcp-server:
    build:
      context: ./mcp_servers
      dockerfile: Dockerfile
    container_name: borgos-mcp-server
    ports:
      - "3000:3000"
    environment:
      - MCP_SERVER_PORT=3000
      - DATABASE_URL=postgresql://borgos:${DB_PASSWORD:-borgos123}@postgres:5432/mcp
    volumes:
      - ./mcp_servers:/app
      - mcp-data:/data
    networks:
      - borgos-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - full

networks:
  borgos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  chroma-data:
    driver: local
  ollama-data:
    driver: local
  agent-zero-data:
    driver: local
  agent-zero-memory:
    driver: local
  zenith-projects:
    driver: local
  n8n-data:
    driver: local
  portainer-data:
    driver: local
  mcp-data:
    driver: local